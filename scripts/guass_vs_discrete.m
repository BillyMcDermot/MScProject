%% Comparing CE measures when using Gaussian approximation for MI and when discretising data and calculating exact MI
% 
%       We use the phases generated by a Kuramoto oscillator as the micro
%       variables and a RICA decomposition of the phase as the macro
%       variable.
%
% Billy McDermot, June 2022
rng(1)
close all;
clc;

%% parameter specification
data = load('Data\Kuramoto\4x16_10000.mat');    % phases generated by gauss_vs_discrete.m with 1000 points
phase = data.phase;

npoints =			length(phase);		    % number of data points in time-series to simulate

bins =            [2:9, 10:10:90, 100:100:1000];         % number of bins to group X and V data into

%% quadratically expand the phase time series and find weights for decent macro variable

phase2 = QuadraticExpand(phase);
weights = RicaWeights(phase2, 4); % use RICA to find decent guesses of macrovariables with emergence close to 0
V = sum(phase2.*weights); % 

%% calculate CE using Gaussian approximation

gauss_psi1 = EmergencePsi(phase2.', sigma_chi);                  % V = chimera index
gauss_psi2 = EmergencePsi(phase2.', V);                  % V = weighted sum of columns using best vector from RICA
gauss_psi3 = EmergencePsi(phase2.', randn(1,npoints));               % V = random standard normal data

%% calculate CE using different levels of discretisation on X and V

disc_psi1 = ones(length(bins));
disc_psi2 = ones(length(bins));
disc_psi3 = ones(length(bins));

% loop through all combinations of bin sizes for X and V and calculate the
% CE metric psi using discretised sigma_chi and RICA
i = 1;
for X_bins = bins
    disc_phase2 = discretize(phase2, X_bins);
    disc_phase = disc_phase2(1:n_communities*intra_comm_size, :);
    j = 1;
    for V_bins = bins
        disc_sigma_chi = discretize(sigma_chi, V_bins);
        disc_V = discretize(V, V_bins);
        disc_psi1(i, j) = EmergencePsi(disc_phase.', disc_sigma_chi);
        disc_psi2(i, j) = EmergencePsi(disc_phase.', disc_V);
        disc_psi3(i, j) = EmergencePsi(disc_phase.', randi([1 V_bins], 1, npoints));
        j = j+1;
    end
    i = i+1;
end

%% plot results

% create custom colormap
map1 = [linspace(0,1,64)', linspace(0,1,64)', linspace(1,1,64)'];
map2 = [linspace(1,0,64)', linspace(1,1,64)', linspace(1,0,64)'];
map = vertcat(map1,map2);

% CE metrics using chimera index as macro
figure(1)
heatmap(bins, bins, disc_psi1)
caxis([-8,8])
colormap(map)
xlabel('V levels')
ylabel('X levels')

% CE metrics using weighted sum as macro
figure(2)
heatmap(bins, bins, disc_psi2)
caxis([-8,8])
colormap(map)
xlabel('V levels')
ylabel('X levels')

% CE metrics using random integers
figure(3)
heatmap(bins, bins, disc_psi3)
caxis([-8,8])
colormap(map)
xlabel('V levels')
ylabel('X levels')