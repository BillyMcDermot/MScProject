%% Comparing CE measures when using Gaussian approximation for MI and when discretising data and calculating exact MI
% 
%       We use the phases generated by a Kuramoto oscillator as the micro
%       variables and a RICA decomposition of the phase as the macro
%       variable.
%
% Billy McDermot, June 2022
rng(1)
close all;
clc;

%% parameter specification
data = load('Data\Kuramoto\8x32_10000.mat');    % phases generated by gauss_vs_discrete.m with 1000 points
n_communities = 8;          % number of communities
intra_comm_size = 32;     % number of oscillators in each community
phase = data.phase;

npoints =			length(phase);		    % number of data points in time-series to simulate

bins =            [2:9, 10:10:100];         % number of bins to group X and V data into

%% calculate chimera index

synchrony = zeros(8,npoints);       % synchrony of each community
sigma_chi = zeros(1,npoints);       % chimera index of the system

% compute synchrony within communities
for i = 1:n_communities
    for j = 1:npoints
        synchrony(i,j) = abs(mean(exp(phase(intra_comm_size*(i-1)+1:intra_comm_size*i, j)*sqrt(-1))));
    end
end

% compute chimera index
for t = 1:npoints
    sigma_chi(1,t) = var(synchrony(:,t));
end

%% use RICA to find macrovariable

weights = RicaWeights(phase, 4); % use RICA to find decent guesses of macrovariables with emergence close to 0
V = sum(phase.*weights); % 

%% calculate CE using Gaussian approximation

gauss_psi1 = EmergencePsi(phase.', sigma_chi);                  % V = chimera index
gauss_psi2 = EmergencePsi(phase.', V);                  % V = weighted sum of columns using best vector from RICA
gauss_psi3 = EmergencePsi(phase.', randn(1,npoints));               % V = random standard normal data

%% calculate CE using different levels of discretisation on X and V

disc_psi1 = ones(length(bins));
disc_psi2 = ones(length(bins));
disc_psi3 = ones(length(bins));

% loop through all combinations of bin sizes for X and V and calculate the
% CE metric psi using discretised sigma_chi and RICA
i = 1;
for X_bins = bins
    disp(X_bins)
    disc_phase = discretize(phase, X_bins);
    j = 1;
    for V_bins = bins
        disp(V_bins)
        disc_sigma_chi = discretize(sigma_chi, V_bins);
        disc_V = discretize(V, V_bins);
        disc_psi1(i, j) = EmergencePsi(disc_phase.', disc_sigma_chi);
        disc_psi2(i, j) = EmergencePsi(disc_phase.', disc_V);
        disc_psi3(i, j) = EmergencePsi(disc_phase.', randi([1 V_bins], 1, npoints));
        j = j+1;
    end
    i = i+1;
end

%% plot results
tiledlayout(1,3,"Padding",'tight')
nexttile

% create custom colormap
map1 = [linspace(0,1,64)', linspace(0,1,64)', linspace(1,1,64)'];
map2 = [linspace(1,0,64)', linspace(1,1,64)', linspace(1,0,64)'];
map = vertcat(map1,map2);
% CE metrics using chimera index as macro
figure(1)
heatmap(bins, bins, disc_psi1)
caxis([-2,2])
colormap(map)
title('Macro: \sigma_{chi}')
xlabel('V levels')
ylabel('X levels')

nexttile
% CE metrics using weighted sum as macro
heatmap(bins, bins, disc_psi2)
caxis([-100,0])
colormap(map)
title('Macro: RICA weighted sum')
xlabel('V levels')

nexttile
% CE metrics using random integers
heatmap(bins, bins, disc_psi3)
caxis([-2,2])
colormap(map)
title('Macro: random Gaussian noise')
xlabel('V levels')